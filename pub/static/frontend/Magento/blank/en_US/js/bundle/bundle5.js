require.config({"config": {
        "jsbuild":{"Vertex_AddressValidation/js/view/shipping-validation-mixin.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'uiRegistry',\n    'Magento_Checkout/js/model/quote'\n], function ($, _, uiRegistry, quote) {\n    'use strict';\n\n    return function (Component) {\n        return Component.extend({\n            vertexMessage: {},\n\n            /**\n             * @inheritdoc\n             */\n            initialize: function () {\n                this._super();\n\n                $(document).on(\n                    'afterValidate',\n                    function (event, vertexMessage, stopOnSuccess) {\n                    if (!stopOnSuccess && vertexMessage.type === 0) {\n                        this.vertexMessage = vertexMessage;\n                        /*\n                         * re-trigger validation - easiest way to continue\n                         * When a vertexMessage is set, validation will allow\n                         *  the customer to proceed w/out another round of\n                         * Vertex Address Validation\n                         */\n                        this.setShippingInformation();\n                        // Clear message after continuation\n                        this.vertexMessage = {};\n                    } else {\n                        this.vertexMessage = vertexMessage;\n                    }\n                }.bind(this));\n\n                return this;\n            },\n\n            /**\n             * @return {Boolean}\n             */\n            validateShippingInformation: function () {\n                var superResult = this._super(),\n                    self = this,\n                    config = window.checkoutConfig,\n                    validationConfig = config.vertexAddressValidationConfig,\n                    shippingData = quote.shippingAddress(),\n                    componentValidation = uiRegistry.get(\n                        'checkout.steps.shipping-step.shippingAddress' +\n                        '.before-shipping-method-form.shippingAdditional' +\n                        '.shipping-address-messages'\n                    );\n\n                if (!validationConfig.isAddressValidationEnabled ||\n                    !componentValidation ||\n                    !superResult ||\n                    !quote.shippingAddress().isEditable() ||\n                    validationConfig.countryValidation.indexOf(shippingData.countryId) === -1\n                ) {\n                    return superResult;\n                }\n\n                if (Object.values(self.vertexMessage).length > 0) {\n                    componentValidation.removeMessage();\n                    this.vertexMessage = {};\n\n                    return superResult;\n                }\n\n                if (superResult) {\n                    componentValidation.addressValidation();\n\n                    return false;\n                }\n                this.vertexMessage = {};\n\n                return superResult;\n            }\n        });\n    };\n});\n","Vertex_AddressValidation/js/view/checkout/billing/address-validation.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'ko',\n    'uiComponent',\n    'Vertex_AddressValidation/js/action/set-address-for-validation',\n    'Vertex_AddressValidation/js/model/validation',\n    'Magento_Checkout/js/checkout-data',\n    'Magento_Checkout/js/model/full-screen-loader'\n], function (\n    $,\n    _,\n    ko,\n    Component,\n    setAddressActionForValidation,\n    validationModel,\n    checkoutData,\n    fullScreenLoader\n) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            messages: []\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe('messages');\n\n            return this;\n        },\n\n        /**\n         * Triggers a request to the address validation builder and adds the response\n         */\n        addressValidation: function () {\n            var self = this;\n\n            setAddressActionForValidation(checkoutData.getBillingAddressFromData()).done(\n                function (response) {\n                    var message = self.getAddressDifferenceResponse(response);\n\n                    fullScreenLoader.stopLoader();\n                    $(document).trigger('afterValidateBilling', [\n                        response,\n                        message,\n                        window.checkoutConfig.vertexAddressValidationConfig.isAlwaysShowingTheMessage\n                    ]);\n                }\n            );\n        },\n\n        /**\n         * Retrieve messages\n         *\n         * @param {Object} message\n         */\n        getMessages: function (message) {\n            this.messages.removeAll();\n            this.messages.push(message);\n        },\n\n        /**\n         * Removes all the messages\n         */\n        removeMessage: function () {\n            this.messages.removeAll();\n        },\n\n        /**\n         * Get the message with the differences\n         *\n         * @param {Object} apiResponse\n         */\n        getAddressDifferenceResponse: function (apiResponse) {\n            var message = validationModel.resolveAddressDifference(apiResponse, true);\n\n            window.localStorage.setItem('validated_billing_address', JSON.stringify(apiResponse));\n            this.getMessages(message);\n\n            return message;\n        },\n\n        /**\n         * Get the update message\n         */\n        updateVertexAddress: function () {\n            var validAddressStorage = window.localStorage.getItem('validated_billing_address'),\n                message = validationModel.resolveBillingAddressInvalid(validAddressStorage);\n\n            this.getMessages(message);\n            window.localStorage.setItem('validated_billing_address', JSON.stringify({}));\n\n            return message;\n        }\n    });\n});\n","Vertex_AddressValidation/js/view/checkout/shipping/address-validation.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'ko',\n    'uiComponent',\n    'Vertex_AddressValidation/js/action/set-address-for-validation',\n    'Vertex_AddressValidation/js/model/validation',\n    'Magento_Checkout/js/checkout-data',\n    'Magento_Checkout/js/model/full-screen-loader'\n], function (\n    $,\n    _,\n    ko,\n    Component,\n    setAddressActionForValidation,\n    validationModel,\n    checkoutData,\n    fullScreenLoader\n) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            messages: []\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe('messages');\n\n            return this;\n        },\n\n        /**\n         * Triggers a request to the address validation builder and adds the response\n         */\n        addressValidation: function () {\n            var self = this;\n\n            setAddressActionForValidation(checkoutData.getShippingAddressFromData()).done(\n                function (response) {\n                    var message = self.getAddressDifferenceResponse(response);\n\n                    fullScreenLoader.stopLoader();\n                    $(document).trigger('afterValidate', [\n                        message,\n                        window.checkoutConfig.vertexAddressValidationConfig.isAlwaysShowingTheMessage\n                    ]);\n                }\n            );\n        },\n\n        /**\n         * Retrieve messages\n         *\n         * @param {Object} message\n         */\n        getMessages: function (message) {\n            this.messages.removeAll();\n            this.messages.push(message);\n        },\n\n        /**\n         * Removes all the messages\n         */\n        removeMessage: function () {\n            this.messages.removeAll();\n        },\n\n        /**\n         * Get the message with the differences\n         *\n         * @param {Object} apiResponse\n         */\n        getAddressDifferenceResponse: function (apiResponse) {\n            var message = validationModel.resolveAddressDifference(apiResponse);\n\n            window.localStorage.setItem('validated_shipping_address', JSON.stringify(apiResponse));\n            this.getMessages(message);\n\n            return message;\n        },\n\n        /**\n         * Get the update message\n         */\n        updateVertexAddress: function () {\n            var validAddressStorage = window.localStorage.getItem('validated_shipping_address'),\n                message = validationModel.resolveShippingAddressInvalid(validAddressStorage);\n\n            this.getMessages(message);\n            window.localStorage.setItem('validated_shipping_address', JSON.stringify({}));\n\n            return message;\n        }\n    });\n});\n","Vertex_Tax/js/form/element/custom-option-flex-field-select.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['underscore', 'Magento_Ui/js/form/element/select'], function (_, Select) {\n    'use strict';\n\n    return Select.extend({\n        /**\n         * Overwrites the parent's filter to allow for checking if a value is\n         * in an array and for allowing the value of \"unmapped\" through all\n         * filters\n         *\n         * @param {String} value\n         * @param {String} field\n         */\n        filter: function (value, field) {\n            var source = this.initialOptions,\n                result;\n\n            field = field || this.filterBy.field;\n\n            result = _.filter(source, function (item) {\n                return Array.isArray(item[field]) && item[field].includes(value) ||\n                    item[field] === value ||\n                    item.value === '' ||\n                    item.value === 'unmapped';\n            });\n\n            this.setOptions(result);\n        }\n    });\n});\n","Vertex_Tax/js/model/set-checkout-messages.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(\n    [\n        'underscore',\n        'Magento_Customer/js/customer-data',\n        'Magento_Ui/js/model/messageList'\n    ],\n    function (_, customerData, messageContainer) {\n        'use strict';\n\n        /**\n         * A utility for observing message updates in session storage. It is designed to subscribe to\n         * customer data updates and forward messages to the appropriate messageList model.\n         */\n        return function () {\n            var typeMap = {\n                    'success': 'addSuccessMessage',\n                    'warning': 'addErrorMessage',\n                    'error': 'addErrorMessage'\n                },\n\n                /**\n                 * Observe message section data changes and forward to the error processor.\n                 * @param {Object} data - The observable payload.\n                 * @return void\n                 */\n                messageSubscriptionCallback = function (data) {\n                    if ('messages' in data) {\n                        _.each(data.messages, function (message) {\n                            if (message.type in typeMap) {\n                                messageContainer[typeMap[message.type]]({\n                                    'message': message.text\n                                });\n                            }\n                        });\n                    }\n                };\n\n            customerData.get('messages').subscribe(messageSubscriptionCallback);\n        };\n    }\n);\n","Vertex_Tax/js/view/checkout/summary/tax-messages.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'underscore',\n    'ko',\n    'uiComponent',\n    'Magento_Checkout/js/model/totals'\n], function (_, ko, Component, totals) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            messages: []\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            this.subscribeTotals();\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe('messages');\n            this.getMessages();\n\n            return this;\n        },\n\n        /**\n         * Retrieve messages\n         */\n        getMessages: function () {\n            var taxSegment = totals.getSegment('tax');\n\n            this.messages([]);\n\n            if (taxSegment && taxSegment['extension_attributes']) {\n                this.messages(taxSegment['extension_attributes']['vertex_tax_calculation_messages']);\n            }\n        },\n\n        /**\n         * Subscribe totals observer\n         */\n        subscribeTotals: function () {\n            var self = this;\n\n            totals.totals.subscribe(\n                function () {\n                    self.getMessages();\n                },\n                null,\n                'change'\n            );\n        }\n    });\n});\n"}
}});
